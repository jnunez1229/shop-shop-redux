{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Cart","toggleCart","sum","toFixed","calculateTotal","Auth","loggedIn","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","a","preventDefault","variables","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2877f89c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\n\n    export function idbPromise(storeName, method, object) {\n      return new Promise((resolve, reject) => {\n        // open connection to the database `shop-shop` with the version of 1\n        const request = window.indexedDB.open('shop-shop', 1);\n    \n        // create variables to hold reference to the database, transaction (tx), and object store\n        let db, tx, store;\n    \n        // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n        request.onupgradeneeded = function(e) {\n          const db = request.result;\n          // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n          db.createObjectStore('products', { keyPath: '_id' });\n          db.createObjectStore('categories', { keyPath: '_id' });\n          db.createObjectStore('cart', { keyPath: '_id' });\n        };\n    \n        // handle any errors with connecting\n        request.onerror = function(e) {\n          console.log('There was an error');\n        };\n\n        // on database open success\n        request.onsuccess = function(e) {\n          // save a reference of the database to the `db` variable\n          db = request.result;\n          // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n          tx = db.transaction(storeName, 'readwrite');\n          // save a reference to that object store\n          store = tx.objectStore(storeName);\n\n          // if there's any errors, let us know\n          db.onerror = function(e) {\n            console.log('error', e);\n          };\n\n          switch (method) {\n            case 'put':\n              store.put(object);\n              resolve(object);\n              break;\n            case 'get':\n              const all = store.getAll();\n              all.onsuccess = function() {\n                resolve(all.result);\n              };\n              break;\n            case 'delete':\n              store.delete(object._id);\n              break;\n            default:\n              console.log('No valid method');\n              break;\n          }\n          \n          // when the transaction is complete, close the connection\n          tx.oncomplete = function() {\n            db.close();\n          };\n        };\n      });\n\n      \n    }\n","import {useReducer} from 'react'\nimport {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from './actions';\n  \n  export const reducer = (state, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n        return {\n          ...state,\n          products: [...action.products],\n        };\n\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n        return {\n          ...state,\n          categories: [...action.categories]\n        };\n\n        case UPDATE_CURRENT_CATEGORY:\n        return {\n            ...state,\n            currentCategory: action.currentCategory\n        };\n\n        case ADD_TO_CART:\n        return {\n          ...state,\n          cartOpen: true,\n          cart: [...state.cart, action.product]\n        };\n  \n         // if it's none of these actions, do not update state at all and keep things the same!\n        default:\n        return state;\n\n        case ADD_MULTIPLE_TO_CART:\n        return {\n          ...state,\n          cart: [...state.cart, ...action.products],\n        };\n\n        case REMOVE_FROM_CART:\n        let newState = state.cart.filter(product => {\n          return product._id !== action._id;\n        });\n\n        return {\n          ...state,\n          cartOpen: newState.length > 0,\n          cart: newState\n        };\n\n        case UPDATE_CART_QUANTITY:\n        return {\n          ...state,\n          cartOpen: true,\n          cart: state.cart.map(product => {\n            if (action._id === product._id) {\n              product.purchaseQuantity = action.purchaseQuantity;\n            }\n            return product;\n          })\n        };\n\n        case CLEAR_CART:\n        return {\n          ...state,\n          cartOpen: false,\n          cart: []\n        };\n\n        case TOGGLE_CART:\n        return {\n          ...state,\n          cartOpen: !state.cartOpen\n        };\n     }\n  };\n\n  export function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n  }","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers';\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n    const [state, dispatch] = useProductReducer({\n      products: [],\n      cart: [],\n      cartOpen: false,\n      categories: [],\n      currentCategory: ''\n    });\n    // use this to confirm it works!\n    console.log(state);\n    return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n    return useContext(StoreContext);\n};\n\n\n\nexport { StoreProvider, useStoreContext };","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const [state, dispatch] = useStoreContext();\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n  \n    // if there was a match, call UPDATE with a new purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n    }\n  };\n\n\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import gql from 'graphql-tag';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n{\n  categories {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    orders {\n      _id\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n      }\n    }\n  }\n}\n`;","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\";\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  useEffect(() => {\n    if(data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { idbPromise } from '../../utils/helpers';\n\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n  \n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n  \n    useEffect(() => {\n      if (categoryData) {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categoryData.categories\n        });\n        categoryData.categories.forEach(category => {\n          idbPromise('categories', 'put', category);\n        });\n      } else if (!loading) {\n        idbPromise('categories', 'get').then(categories => {\n          dispatch({\n            type: UPDATE_CATEGORIES,\n            categories: categories\n          });\n        });\n      }\n    }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nconst CartItem = ({ item }) => {\n\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n  \n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React from 'react';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART } from '../../utils/actions';\n\nconst Cart = () => {\n\n  const [state, dispatch] = useStoreContext();\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n\n\n  return (\n    <div className=\"cart\">\n  <div className=\"close\" onClick={toggleCart}>[close]</div>\n  <h2>Shopping Cart</h2>\n  {state.cart.length ? (\n    <div>\n      {state.cart.map(item => (\n        <CartItem key={item._id} item={item} />\n      ))}\n      <div className=\"flex-row space-between\">\n        <strong>Total: ${calculateTotal()}</strong>\n        {\n          Auth.loggedIn() ?\n            <button>\n              Checkout\n            </button>\n            :\n            <span>(log in to check out)</span>\n        }\n      </div>\n    </div>\n  ) : (\n    <h3>\n      <span role=\"img\" aria-label=\"shocked\">\n        😱\n      </span>\n      You haven't added anything to your cart yet!\n    </h3>\n  )}\n</div>\n  );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport Cart from '../components/Cart';\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\nimport { idbPromise } from \"../utils/helpers\";\n\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n  \n  const [currentProduct, setCurrentProduct] = useState({})\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  const { products, cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  };\n  \n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button \n              disabled={!cart.find(p => p._id === currentProduct._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      } \n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Products\n          </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img\n                          alt={name}\n                          src={`/images/${image}`}\n                        />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport OrderHistory from \"./pages/OrderHistory\";\nimport { StoreProvider } from \"./utils/GlobalState\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}